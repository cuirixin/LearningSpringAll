<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.phoenix.mapper.UserMapper">

    <!-- 开启二级缓存，默认使用了PerpetualCache -->
    <!-- <cache type="org.apache.ibatis.cache.impl.PerpetualCache"></cache> -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" flushInterval="60000"/>

    <!-- 根据用户ID查询用户信息 -->
    <!-- select：表示一个MappedStatement对象 -->
    <!-- id：statement的唯一标示 -->
    <!-- #{}：表示一个占位符？ -->
    <!-- #{id}：里面的id表示输入参数的参数名称，如果该参数是简单类型，那么#{}里面的参数名称可以任意 -->
    <!-- parameterType：输入参数的java类型 -->
    <!-- resultType：输出结果的所映射的java类型（单条结果所对应的java类型） -->
    <select id="findUserById" parameterType="int"
            resultType="com.phoenix.model.User">
		SELECT * FROM USER WHERE id =#{id}
	</select>

    <!-- 根据Map查询条件查询用户信息 -->
    <select id="findUserByHashmap" useCache="true" parameterType="hashmap" resultType="com.phoenix.model.User">
        SELECT * FROM USER WHERE id=#{id} and username like '%${username}%'
    </select>

    <!-- 根据用户名称模糊查询用户列表 -->
    <!-- ${}：表示一个sql的连接符 -->
    <!-- ${value}：里面的value表示输入参数的参数名称，如果该参数是简单类型，那么${}里面的参数名称必须是value -->
    <!-- ${}这种写法存在sql注入的风险，所以要慎用！！但是在一些场景下，必须使用${}，比如排序时，动态传入排序的列名，${}会原样输出，不加解释 -->
    <select id="findUsersByName" parameterType="java.lang.String"
            resultType="com.phoenix.model.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%'
	</select>

    <!-- 返回特定的数据 -->
    <resultMap id="BaseResultMap" type="com.phoenix.model.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="sex" jdbcType="TINYINT" property="sex" />
        <result column="birthday" jdbcType="DATE" property="birthday" />
        <!--        <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated" />-->
        <!--        <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />-->
    </resultMap>
    <sql id="Base_Column_List">
        id, username, sex, birthday
    </sql>
    <select id="findAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List" />
        FROM USER ;
    </select>


    <!-- 添加用户 -->
    <!-- selectKey：查询主键，在标签内需要输入查询主键的sql -->
    <!-- order：指定查询主键的sql和insert语句的执行顺序，相当于insert语句来说 -->
    <!-- LAST_INSERT_ID：该函数是mysql的函数，获取自增主键的ID，它必须配合insert语句一起使用 -->
    <insert id="insertUser" parameterType="com.phoenix.model.User">
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

        INSERT INTO USER
        (username,birthday,sex,address)
        VALUES(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- 自增主键之UUID
    <insert id="insertUser2" parameterType="com.phoenix.model.User">
        <selectKey keyProperty="id" resultType="string" order="BEFORE">
            SELECT UUID()
        </selectKey>

        INSERT INTO USER
        (id,username,birthday,sex,address)
        VALUES(#{id},#{username},#{birthday},#{sex},#{address})
    </insert>
     -->

    <!-- 自增主键之UUID Oracle
    <insert id="insertUser3" parameterType="com.phoenix.model.User">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            SELECT seq.nextval FROM dual
        </selectKey>

        INSERT INTO USER
        (id,username,birthday,sex,address)
        VALUES(#{id},#{username},#{birthday},#{sex},#{address})
    </insert>
    -->


    <!-- 根据ID删除用户 -->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM USER WHERE id= #{id}
    </delete>

    <!-- 根据传入的用户信息修改用户 -->
    <update id="updateUser" parameterType="com.phoenix.model.User">
        UPDATE USER SET username = #{username},sex=#{sex} WHERE id=#{id}
    </update>



    <!-- 定义sql片段 -->
    <!-- sql片段内，可以定义sql语句中任何部分 -->
    <!-- sql片段内，最好不用将where和select关键字声明在内 -->
    <sql id="whereClause">
        <!-- if标签：可以对输入的参数进行判断 -->
        <!-- test:指定判断表达式 -->
        <if test="user != null">
            <if test="user.username != null and user.username != ''">
                AND username LIKE '%${user.username}%'
            </if>
            <if test="user.sex != null and user.sex != ''">
                AND sex = #{user.sex}
            </if>
        </if>

        <if test="idList != null">
            <!-- AND id IN (#{id},#{id},#{id}) -->

            <!-- collection：表示pojo中集合属性的属性名称 -->
            <!-- item:为遍历出的结果声明一个变量名称 -->
            <!-- open：遍历开始时，需要拼接的字符串 -->
            <!-- close:遍历结束时，需要拼接的字符串 -->
            <!-- separator：遍历中间需要拼接的连接符 -->
            AND id IN
            <foreach collection="idList" item="id" open="(" close=")"
                     separator=",">
                #{id}
            </foreach>
        </if>
    </sql>

    <!-- 综合查询，查询用户列表 -->
    <select id="findUserList" parameterType="com.phoenix.model.UserQueryVO"
            resultType="com.phoenix.model.User">
        SELECT * FROM user
        <!-- where标签：默认去掉后面第一个AND，如果没有参数，则把自己干掉 -->
        <where>
            <!-- 引入sql片段 -->
            <include refid="whereClause" />
        </where>
    </select>

    <!-- 综合查询用户总数 -->
    <select id="findUserCount" parameterType="com.phoenix.model.UserQueryVO"
            resultType="int">
        SELECT count(*) FROM user
        <!-- where标签：默认去掉后面第一个AND，如果没有参数，则把自己干掉 -->
        <where>
            <!-- 引入sql片段 -->
            <include refid="whereClause" />
        </where>
    </select>

    <!-- resultMap入门 -->
    <!-- id标签：专门为查询结果中唯一列映射 -->
    <!-- result标签：映射查询结果中的普通列 -->
    <resultMap type="com.phoenix.model.User" id="UserRstMap">
        <id column="id_" property="id" />
        <result column="username_" property="username" />
        <result column="sex_" property="sex" />
    </resultMap>

    <select id="findUserRstMap" parameterType="int" resultMap="UserRstMap">
		Select id id_,username username_,sex sex_ from user where id = #{id}
	</select>

</mapper>